/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package shadowcodex.slack_spec;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import shadowcodex.slack_spec.utils.HTTPClient;
import shadowcodex.slack_spec.utils.HTTPRequest;
import shadowcodex.slack_spec.utils.JSON;

public class AppsPermissions {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public AppsPermissions(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    public shadowcodex.slack_spec.models.operations.AppsPermissionsInfoResponse appsPermissionsInfo(shadowcodex.slack_spec.models.operations.AppsPermissionsInfoRequest request, shadowcodex.slack_spec.models.operations.AppsPermissionsInfoSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = shadowcodex.slack_spec.utils.Utils.generateURL(baseUrl, "/apps.permissions.info");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = shadowcodex.slack_spec.utils.Utils.getQueryParams(shadowcodex.slack_spec.models.operations.AppsPermissionsInfoRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = shadowcodex.slack_spec.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        shadowcodex.slack_spec.models.operations.AppsPermissionsInfoResponse res = new shadowcodex.slack_spec.models.operations.AppsPermissionsInfoResponse(contentType, httpRes.statusCode()) {{
            appsPermissionsInfoSchema = null;
            appsPermissionsInfoErrorSchema = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.appsPermissionsInfoSchema = out;
            }
        }
        else {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.appsPermissionsInfoErrorSchema = out;
            }
        }

        return res;
    }

    public shadowcodex.slack_spec.models.operations.AppsPermissionsRequestResponse appsPermissionsRequest(shadowcodex.slack_spec.models.operations.AppsPermissionsRequestRequest request, shadowcodex.slack_spec.models.operations.AppsPermissionsRequestSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = shadowcodex.slack_spec.utils.Utils.generateURL(baseUrl, "/apps.permissions.request");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = shadowcodex.slack_spec.utils.Utils.getQueryParams(shadowcodex.slack_spec.models.operations.AppsPermissionsRequestRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = shadowcodex.slack_spec.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        shadowcodex.slack_spec.models.operations.AppsPermissionsRequestResponse res = new shadowcodex.slack_spec.models.operations.AppsPermissionsRequestResponse(contentType, httpRes.statusCode()) {{
            appsPermissionsRequestSchema = null;
            appsPermissionsRequestErrorSchema = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.appsPermissionsRequestSchema = out;
            }
        }
        else {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.appsPermissionsRequestErrorSchema = out;
            }
        }

        return res;
    }
}