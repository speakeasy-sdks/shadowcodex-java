/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package shadowcodex.slack_spec;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import org.apache.http.NameValuePair;
import shadowcodex.slack_spec.utils.HTTPClient;
import shadowcodex.slack_spec.utils.HTTPRequest;
import shadowcodex.slack_spec.utils.JSON;
import shadowcodex.slack_spec.utils.SerializedBody;

public class Chat {
	
	private HTTPClient _defaultClient;
	private HTTPClient _securityClient;
	private String _serverUrl;
	private String _language;
	private String _sdkVersion;
	private String _genVersion;

	public Chat(HTTPClient defaultClient, HTTPClient securityClient, String serverUrl, String language, String sdkVersion, String genVersion) {
		this._defaultClient = defaultClient;
		this._securityClient = securityClient;
		this._serverUrl = serverUrl;
		this._language = language;
		this._sdkVersion = sdkVersion;
		this._genVersion = genVersion;
	}

    /**
     * Deletes a message.
     * https://api.slack.com/methods/chat.delete - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public shadowcodex.slack_spec.models.operations.ChatDeleteResponse chatDelete(shadowcodex.slack_spec.models.operations.ChatDeleteRequest request, shadowcodex.slack_spec.models.operations.ChatDeleteSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = shadowcodex.slack_spec.utils.Utils.generateURL(baseUrl, "/chat.delete");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = shadowcodex.slack_spec.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = shadowcodex.slack_spec.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = shadowcodex.slack_spec.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        shadowcodex.slack_spec.models.operations.ChatDeleteResponse res = new shadowcodex.slack_spec.models.operations.ChatDeleteResponse(contentType, httpRes.statusCode()) {{
            chatDeleteSuccessSchema = null;
            chatDeleteErrorSchema = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatDeleteSuccessSchema = out;
            }
        }
        else {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatDeleteErrorSchema = out;
            }
        }

        return res;
    }

    /**
     * Deletes a pending scheduled message from the queue.
     * https://api.slack.com/methods/chat.deleteScheduledMessage - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public shadowcodex.slack_spec.models.operations.ChatDeleteScheduledMessageResponse chatDeleteScheduledMessage(shadowcodex.slack_spec.models.operations.ChatDeleteScheduledMessageRequest request, shadowcodex.slack_spec.models.operations.ChatDeleteScheduledMessageSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = shadowcodex.slack_spec.utils.Utils.generateURL(baseUrl, "/chat.deleteScheduledMessage");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = shadowcodex.slack_spec.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = shadowcodex.slack_spec.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = shadowcodex.slack_spec.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        shadowcodex.slack_spec.models.operations.ChatDeleteScheduledMessageResponse res = new shadowcodex.slack_spec.models.operations.ChatDeleteScheduledMessageResponse(contentType, httpRes.statusCode()) {{
            chatDeleteScheduledMessageSchema = null;
            chatDeleteScheduledMessageErrorSchema = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatDeleteScheduledMessageSchema = out;
            }
        }
        else {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatDeleteScheduledMessageErrorSchema = out;
            }
        }

        return res;
    }

    /**
     * Retrieve a permalink URL for a specific extant message
     * https://api.slack.com/methods/chat.getPermalink - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public shadowcodex.slack_spec.models.operations.ChatGetPermalinkResponse chatGetPermalink(shadowcodex.slack_spec.models.operations.ChatGetPermalinkRequest request, shadowcodex.slack_spec.models.operations.ChatGetPermalinkSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = shadowcodex.slack_spec.utils.Utils.generateURL(baseUrl, "/chat.getPermalink");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = shadowcodex.slack_spec.utils.Utils.getQueryParams(shadowcodex.slack_spec.models.operations.ChatGetPermalinkRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        
        HTTPClient client = shadowcodex.slack_spec.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        shadowcodex.slack_spec.models.operations.ChatGetPermalinkResponse res = new shadowcodex.slack_spec.models.operations.ChatGetPermalinkResponse(contentType, httpRes.statusCode()) {{
            chatGetPermalinkSuccessSchema = null;
            chatGetPermalinkErrorSchema = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatGetPermalinkSuccessSchema = out;
            }
        }
        else {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatGetPermalinkErrorSchema = out;
            }
        }

        return res;
    }

    /**
     * Share a me message into a channel.
     * https://api.slack.com/methods/chat.meMessage - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public shadowcodex.slack_spec.models.operations.ChatMeMessageResponse chatMeMessage(shadowcodex.slack_spec.models.operations.ChatMeMessageRequest request, shadowcodex.slack_spec.models.operations.ChatMeMessageSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = shadowcodex.slack_spec.utils.Utils.generateURL(baseUrl, "/chat.meMessage");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = shadowcodex.slack_spec.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = shadowcodex.slack_spec.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = shadowcodex.slack_spec.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        shadowcodex.slack_spec.models.operations.ChatMeMessageResponse res = new shadowcodex.slack_spec.models.operations.ChatMeMessageResponse(contentType, httpRes.statusCode()) {{
            chatMeMessageSchema = null;
            chatMeMessageErrorSchema = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatMeMessageSchema = out;
            }
        }
        else {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatMeMessageErrorSchema = out;
            }
        }

        return res;
    }

    /**
     * Sends an ephemeral message to a user in a channel.
     * https://api.slack.com/methods/chat.postEphemeral - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public shadowcodex.slack_spec.models.operations.ChatPostEphemeralResponse chatPostEphemeral(shadowcodex.slack_spec.models.operations.ChatPostEphemeralRequest request, shadowcodex.slack_spec.models.operations.ChatPostEphemeralSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = shadowcodex.slack_spec.utils.Utils.generateURL(baseUrl, "/chat.postEphemeral");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = shadowcodex.slack_spec.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = shadowcodex.slack_spec.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = shadowcodex.slack_spec.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        shadowcodex.slack_spec.models.operations.ChatPostEphemeralResponse res = new shadowcodex.slack_spec.models.operations.ChatPostEphemeralResponse(contentType, httpRes.statusCode()) {{
            chatPostEphemeralSuccessSchema = null;
            chatPostEphemeralErrorSchema = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatPostEphemeralSuccessSchema = out;
            }
        }
        else {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatPostEphemeralErrorSchema = out;
            }
        }

        return res;
    }

    /**
     * Sends a message to a channel.
     * https://api.slack.com/methods/chat.postMessage - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public shadowcodex.slack_spec.models.operations.ChatPostMessageResponse chatPostMessage(shadowcodex.slack_spec.models.operations.ChatPostMessageRequest request, shadowcodex.slack_spec.models.operations.ChatPostMessageSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = shadowcodex.slack_spec.utils.Utils.generateURL(baseUrl, "/chat.postMessage");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = shadowcodex.slack_spec.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = shadowcodex.slack_spec.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = shadowcodex.slack_spec.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        shadowcodex.slack_spec.models.operations.ChatPostMessageResponse res = new shadowcodex.slack_spec.models.operations.ChatPostMessageResponse(contentType, httpRes.statusCode()) {{
            chatPostMessageSuccessSchema = null;
            chatPostMessageErrorSchema = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatPostMessageSuccessSchema = out;
            }
        }
        else {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatPostMessageErrorSchema = out;
            }
        }

        return res;
    }

    /**
     * Schedules a message to be sent to a channel.
     * https://api.slack.com/methods/chat.scheduleMessage - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public shadowcodex.slack_spec.models.operations.ChatScheduleMessageResponse chatScheduleMessage(shadowcodex.slack_spec.models.operations.ChatScheduleMessageRequest request, shadowcodex.slack_spec.models.operations.ChatScheduleMessageSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = shadowcodex.slack_spec.utils.Utils.generateURL(baseUrl, "/chat.scheduleMessage");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = shadowcodex.slack_spec.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = shadowcodex.slack_spec.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = shadowcodex.slack_spec.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        shadowcodex.slack_spec.models.operations.ChatScheduleMessageResponse res = new shadowcodex.slack_spec.models.operations.ChatScheduleMessageResponse(contentType, httpRes.statusCode()) {{
            chatScheduleMessageSuccessSchema = null;
            chatScheduleMessageErrorSchema = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatScheduleMessageSuccessSchema = out;
            }
        }
        else {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatScheduleMessageErrorSchema = out;
            }
        }

        return res;
    }

    /**
     * Returns a list of scheduled messages.
     * https://api.slack.com/methods/chat.scheduledMessages.list - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public shadowcodex.slack_spec.models.operations.ChatScheduledMessagesListResponse chatScheduledMessagesList(shadowcodex.slack_spec.models.operations.ChatScheduledMessagesListRequest request, shadowcodex.slack_spec.models.operations.ChatScheduledMessagesListSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = shadowcodex.slack_spec.utils.Utils.generateURL(baseUrl, "/chat.scheduledMessages.list");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);
        
        java.util.List<NameValuePair> queryParams = shadowcodex.slack_spec.utils.Utils.getQueryParams(shadowcodex.slack_spec.models.operations.ChatScheduledMessagesListRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }
        java.util.Map<String, java.util.List<String>> headers = shadowcodex.slack_spec.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = shadowcodex.slack_spec.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        shadowcodex.slack_spec.models.operations.ChatScheduledMessagesListResponse res = new shadowcodex.slack_spec.models.operations.ChatScheduledMessagesListResponse(contentType, httpRes.statusCode()) {{
            chatScheduledMessagesListSchema = null;
            chatScheduledMessagesListErrorSchema = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatScheduledMessagesListSchema = out;
            }
        }
        else {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatScheduledMessagesListErrorSchema = out;
            }
        }

        return res;
    }

    /**
     * Provide custom unfurl behavior for user-posted URLs
     * https://api.slack.com/methods/chat.unfurl - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public shadowcodex.slack_spec.models.operations.ChatUnfurlResponse chatUnfurl(shadowcodex.slack_spec.models.operations.ChatUnfurlRequest request, shadowcodex.slack_spec.models.operations.ChatUnfurlSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = shadowcodex.slack_spec.utils.Utils.generateURL(baseUrl, "/chat.unfurl");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = shadowcodex.slack_spec.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = shadowcodex.slack_spec.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = shadowcodex.slack_spec.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        shadowcodex.slack_spec.models.operations.ChatUnfurlResponse res = new shadowcodex.slack_spec.models.operations.ChatUnfurlResponse(contentType, httpRes.statusCode()) {{
            chatUnfurlSuccessSchema = null;
            chatUnfurlErrorSchema = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatUnfurlSuccessSchema = out;
            }
        }
        else {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatUnfurlErrorSchema = out;
            }
        }

        return res;
    }

    /**
     * Updates a message.
     * https://api.slack.com/methods/chat.update - API method documentation
     * @param request the request object containing all of the parameters for the API call
     * @param security the security details to use for authentication
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public shadowcodex.slack_spec.models.operations.ChatUpdateResponse chatUpdate(shadowcodex.slack_spec.models.operations.ChatUpdateRequest request, shadowcodex.slack_spec.models.operations.ChatUpdateSecurity security) throws Exception {
        String baseUrl = this._serverUrl;
        String url = shadowcodex.slack_spec.utils.Utils.generateURL(baseUrl, "/chat.update");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        SerializedBody serializedRequestBody = shadowcodex.slack_spec.utils.Utils.serializeRequestBody(request, "requestBody", "json");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);
        
        java.util.Map<String, java.util.List<String>> headers = shadowcodex.slack_spec.utils.Utils.getHeaders(request);
        if (headers != null) {
            for (java.util.Map.Entry<String, java.util.List<String>> header : headers.entrySet()) {
                for (String value : header.getValue()) {
                    req.addHeader(header.getKey(), value);
                }
            }
        }
        
        HTTPClient client = shadowcodex.slack_spec.utils.Utils.configureSecurityClient(this._defaultClient, security);
        
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        shadowcodex.slack_spec.models.operations.ChatUpdateResponse res = new shadowcodex.slack_spec.models.operations.ChatUpdateResponse(contentType, httpRes.statusCode()) {{
            chatUpdateSuccessSchema = null;
            chatUpdateErrorSchema = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatUpdateSuccessSchema = out;
            }
        }
        else {
            if (shadowcodex.slack_spec.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                java.util.Map<String, java.util.Map<String, Object>> out = mapper.readValue(new String(httpRes.body(), StandardCharsets.UTF_8), new TypeReference<java.util.Map<String, java.util.Map<String, Object>>>() {});
                res.chatUpdateErrorSchema = out;
            }
        }

        return res;
    }
}