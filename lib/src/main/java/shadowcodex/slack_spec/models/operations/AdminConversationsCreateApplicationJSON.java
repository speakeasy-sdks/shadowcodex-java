/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package shadowcodex.slack_spec.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class AdminConversationsCreateApplicationJSON {
    /**
     * Description of the public or private channel to create.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    public String description;

    public AdminConversationsCreateApplicationJSON withDescription(String description) {
        this.description = description;
        return this;
    }
    
    /**
     * When `true`, creates a private channel instead of a public channel
     */
    @JsonProperty("is_private")
    public Boolean isPrivate;

    public AdminConversationsCreateApplicationJSON withIsPrivate(Boolean isPrivate) {
        this.isPrivate = isPrivate;
        return this;
    }
    
    /**
     * Name of the public or private channel to create.
     */
    @JsonProperty("name")
    public String name;

    public AdminConversationsCreateApplicationJSON withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * When `true`, the channel will be available org-wide. Note: if the channel is not `org_wide=true`, you must specify a `team_id` for this channel
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("org_wide")
    public Boolean orgWide;

    public AdminConversationsCreateApplicationJSON withOrgWide(Boolean orgWide) {
        this.orgWide = orgWide;
        return this;
    }
    
    /**
     * The workspace to create the channel in. Note: this argument is required unless you set `org_wide=true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("team_id")
    public String teamId;

    public AdminConversationsCreateApplicationJSON withTeamId(String teamId) {
        this.teamId = teamId;
        return this;
    }
    
    public AdminConversationsCreateApplicationJSON(@JsonProperty("is_private") Boolean isPrivate, @JsonProperty("name") String name) {
        this.isPrivate = isPrivate;
        this.name = name;
  }
}
