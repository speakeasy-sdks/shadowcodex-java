/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package shadowcodex.slack_spec.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ChatScheduleMessageApplicationJSON {
    /**
     * Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [chat.postMessage](chat.postMessage#authorship).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("as_user")
    public Boolean asUser;
    public ChatScheduleMessageApplicationJSON withAsUser(Boolean asUser) {
        this.asUser = asUser;
        return this;
    }
    
    /**
     * A JSON-based array of structured attachments, presented as a URL-encoded string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachments")
    public String attachments;
    public ChatScheduleMessageApplicationJSON withAttachments(String attachments) {
        this.attachments = attachments;
        return this;
    }
    
    /**
     * A JSON-based array of structured blocks, presented as a URL-encoded string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocks")
    public String blocks;
    public ChatScheduleMessageApplicationJSON withBlocks(String blocks) {
        this.blocks = blocks;
        return this;
    }
    
    /**
     * Channel, private group, or DM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("channel")
    public String channel;
    public ChatScheduleMessageApplicationJSON withChannel(String channel) {
        this.channel = channel;
        return this;
    }
    
    /**
     * Find and link channel names and usernames.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("link_names")
    public Boolean linkNames;
    public ChatScheduleMessageApplicationJSON withLinkNames(Boolean linkNames) {
        this.linkNames = linkNames;
        return this;
    }
    
    /**
     * Change how messages are treated. Defaults to `none`. See [chat.postMessage](chat.postMessage#formatting).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parse")
    public String parse;
    public ChatScheduleMessageApplicationJSON withParse(String parse) {
        this.parse = parse;
        return this;
    }
    
    /**
     * Unix EPOCH timestamp of time in future to send the message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("post_at")
    public String postAt;
    public ChatScheduleMessageApplicationJSON withPostAt(String postAt) {
        this.postAt = postAt;
        return this;
    }
    
    /**
     * Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reply_broadcast")
    public Boolean replyBroadcast;
    public ChatScheduleMessageApplicationJSON withReplyBroadcast(Boolean replyBroadcast) {
        this.replyBroadcast = replyBroadcast;
        return this;
    }
    
    /**
     * How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    public String text;
    public ChatScheduleMessageApplicationJSON withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thread_ts")
    public Double threadTs;
    public ChatScheduleMessageApplicationJSON withThreadTs(Double threadTs) {
        this.threadTs = threadTs;
        return this;
    }
    
    /**
     * Pass true to enable unfurling of primarily text-based content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unfurl_links")
    public Boolean unfurlLinks;
    public ChatScheduleMessageApplicationJSON withUnfurlLinks(Boolean unfurlLinks) {
        this.unfurlLinks = unfurlLinks;
        return this;
    }
    
    /**
     * Pass false to disable unfurling of media content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unfurl_media")
    public Boolean unfurlMedia;
    public ChatScheduleMessageApplicationJSON withUnfurlMedia(Boolean unfurlMedia) {
        this.unfurlMedia = unfurlMedia;
        return this;
    }
    
    public ChatScheduleMessageApplicationJSON(){}
}
