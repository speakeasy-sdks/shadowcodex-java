/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package shadowcodex.slack_spec.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import shadowcodex.slack_spec.utils.SpeakeasyMetadata;

public class ViewsUpdateRequest {
    /**
     * A unique identifier of the view set by the developer. Must be unique for all views on a team. Max length of 255 characters. Either `view_id` or `external_id` is required.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=external_id")
    public String externalId;
    public ViewsUpdateRequest withExternalId(String externalId) {
        this.externalId = externalId;
        return this;
    }
    
    /**
     * A string that represents view state to protect against possible race conditions.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=hash")
    public String hash;
    public ViewsUpdateRequest withHash(String hash) {
        this.hash = hash;
        return this;
    }
    
    /**
     * Authentication token. Requires scope: `none`
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=token")
    public String token;
    public ViewsUpdateRequest withToken(String token) {
        this.token = token;
        return this;
    }
    
    /**
     * A [view object](/reference/surfaces/views). This must be a JSON-encoded string.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=view")
    public String view;
    public ViewsUpdateRequest withView(String view) {
        this.view = view;
        return this;
    }
    
    /**
     * A unique identifier of the view to be updated. Either `view_id` or `external_id` is required.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=view_id")
    public String viewId;
    public ViewsUpdateRequest withViewId(String viewId) {
        this.viewId = viewId;
        return this;
    }
    
    public ViewsUpdateRequest(@JsonProperty("token") String token) {
        this.token = token;
  }
}
