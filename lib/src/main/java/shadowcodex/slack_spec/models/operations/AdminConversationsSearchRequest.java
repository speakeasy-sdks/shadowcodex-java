/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package shadowcodex.slack_spec.models.operations;

import com.fasterxml.jackson.annotation.JsonProperty;
import shadowcodex.slack_spec.utils.SpeakeasyMetadata;

public class AdminConversationsSearchRequest {
    /**
     * Set `cursor` to `next_cursor` returned by the previous call to list items in the next page.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    public String cursor;
    public AdminConversationsSearchRequest withCursor(String cursor) {
        this.cursor = cursor;
        return this;
    }
    
    /**
     * Maximum number of items to be returned. Must be between 1 - 20 both inclusive. Default is 10.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Long limit;
    public AdminConversationsSearchRequest withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Name of the the channel to query by.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    public String query;
    public AdminConversationsSearchRequest withQuery(String query) {
        this.query = query;
        return this;
    }
    
    /**
     * The type of channel to include or exclude in the search. For example `private` will search private channels, while `private_exclude` will exclude them. For a full list of types, check the [Types section](#types).
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=search_channel_types")
    public String searchChannelTypes;
    public AdminConversationsSearchRequest withSearchChannelTypes(String searchChannelTypes) {
        this.searchChannelTypes = searchChannelTypes;
        return this;
    }
    
    /**
     * Possible values are `relevant` (search ranking based on what we think is closest), `name` (alphabetical), `member_count` (number of users in the channel), and `created` (date channel was created). You can optionally pair this with the `sort_dir` arg to change how it is sorted 
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    public String sort;
    public AdminConversationsSearchRequest withSort(String sort) {
        this.sort = sort;
        return this;
    }
    
    /**
     * Sort direction. Possible values are `asc` for ascending order like (1, 2, 3) or (a, b, c), and `desc` for descending order like (3, 2, 1) or (c, b, a)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_dir")
    public String sortDir;
    public AdminConversationsSearchRequest withSortDir(String sortDir) {
        this.sortDir = sortDir;
        return this;
    }
    
    /**
     * Comma separated string of team IDs, signifying the workspaces to search through.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=team_ids")
    public String teamIds;
    public AdminConversationsSearchRequest withTeamIds(String teamIds) {
        this.teamIds = teamIds;
        return this;
    }
    
    /**
     * Authentication token. Requires scope: `admin.conversations:read`
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=token")
    public String token;
    public AdminConversationsSearchRequest withToken(String token) {
        this.token = token;
        return this;
    }
    
    public AdminConversationsSearchRequest(@JsonProperty("token") String token) {
        this.token = token;
  }
}
