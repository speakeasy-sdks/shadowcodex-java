/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package shadowcodex.slack_spec.models.operations;

import shadowcodex.slack_spec.utils.SpeakeasyMetadata;

public class ConversationsMembersRequest {
    /**
     * ID of the conversation to retrieve members for
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=channel")
    public String channel;
    public ConversationsMembersRequest withChannel(String channel) {
        this.channel = channel;
        return this;
    }
    
    /**
     * Paginate through collections of data by setting the `cursor` parameter to a `next_cursor` attribute returned by a previous request's `response_metadata`. Default value fetches the first "page" of the collection. See [pagination](/docs/pagination) for more detail.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=cursor")
    public String cursor;
    public ConversationsMembersRequest withCursor(String cursor) {
        this.cursor = cursor;
        return this;
    }
    
    /**
     * The maximum number of items to return. Fewer than the requested number of items may be returned, even if the end of the users list hasn't been reached.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    public Long limit;
    public ConversationsMembersRequest withLimit(Long limit) {
        this.limit = limit;
        return this;
    }
    
    /**
     * Authentication token. Requires scope: `conversations:read`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=token")
    public String token;
    public ConversationsMembersRequest withToken(String token) {
        this.token = token;
        return this;
    }
    
    public ConversationsMembersRequest(){}
}
