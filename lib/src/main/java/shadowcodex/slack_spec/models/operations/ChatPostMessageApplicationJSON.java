/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package shadowcodex.slack_spec.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ChatPostMessageApplicationJSON {
    /**
     * Pass true to post the message as the authed user, instead of as a bot. Defaults to false. See [authorship](#authorship) below.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("as_user")
    public String asUser;
    public ChatPostMessageApplicationJSON withAsUser(String asUser) {
        this.asUser = asUser;
        return this;
    }
    
    /**
     * A JSON-based array of structured attachments, presented as a URL-encoded string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachments")
    public String attachments;
    public ChatPostMessageApplicationJSON withAttachments(String attachments) {
        this.attachments = attachments;
        return this;
    }
    
    /**
     * A JSON-based array of structured blocks, presented as a URL-encoded string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocks")
    public String blocks;
    public ChatPostMessageApplicationJSON withBlocks(String blocks) {
        this.blocks = blocks;
        return this;
    }
    
    /**
     * Channel, private group, or IM channel to send message to. Can be an encoded ID, or a name. See [below](#channels) for more details.
     */
    @JsonProperty("channel")
    public String channel;
    public ChatPostMessageApplicationJSON withChannel(String channel) {
        this.channel = channel;
        return this;
    }
    
    /**
     * Emoji to use as the icon for this message. Overrides `icon_url`. Must be used in conjunction with `as_user` set to `false`, otherwise ignored. See [authorship](#authorship) below.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon_emoji")
    public String iconEmoji;
    public ChatPostMessageApplicationJSON withIconEmoji(String iconEmoji) {
        this.iconEmoji = iconEmoji;
        return this;
    }
    
    /**
     * URL to an image to use as the icon for this message. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("icon_url")
    public String iconUrl;
    public ChatPostMessageApplicationJSON withIconUrl(String iconUrl) {
        this.iconUrl = iconUrl;
        return this;
    }
    
    /**
     * Find and link channel names and usernames.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("link_names")
    public Boolean linkNames;
    public ChatPostMessageApplicationJSON withLinkNames(Boolean linkNames) {
        this.linkNames = linkNames;
        return this;
    }
    
    /**
     * Disable Slack markup parsing by setting to `false`. Enabled by default.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mrkdwn")
    public Boolean mrkdwn;
    public ChatPostMessageApplicationJSON withMrkdwn(Boolean mrkdwn) {
        this.mrkdwn = mrkdwn;
        return this;
    }
    
    /**
     * Change how messages are treated. Defaults to `none`. See [below](#formatting).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parse")
    public String parse;
    public ChatPostMessageApplicationJSON withParse(String parse) {
        this.parse = parse;
        return this;
    }
    
    /**
     * Used in conjunction with `thread_ts` and indicates whether reply should be made visible to everyone in the channel or conversation. Defaults to `false`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reply_broadcast")
    public Boolean replyBroadcast;
    public ChatPostMessageApplicationJSON withReplyBroadcast(Boolean replyBroadcast) {
        this.replyBroadcast = replyBroadcast;
        return this;
    }
    
    /**
     * How this field works and whether it is required depends on other fields you use in your API call. [See below](#text_usage) for more detail.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    public String text;
    public ChatPostMessageApplicationJSON withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * Provide another message's `ts` value to make this message a reply. Avoid using a reply's `ts` value; use its parent instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thread_ts")
    public String threadTs;
    public ChatPostMessageApplicationJSON withThreadTs(String threadTs) {
        this.threadTs = threadTs;
        return this;
    }
    
    /**
     * Pass true to enable unfurling of primarily text-based content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unfurl_links")
    public Boolean unfurlLinks;
    public ChatPostMessageApplicationJSON withUnfurlLinks(Boolean unfurlLinks) {
        this.unfurlLinks = unfurlLinks;
        return this;
    }
    
    /**
     * Pass false to disable unfurling of media content.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unfurl_media")
    public Boolean unfurlMedia;
    public ChatPostMessageApplicationJSON withUnfurlMedia(Boolean unfurlMedia) {
        this.unfurlMedia = unfurlMedia;
        return this;
    }
    
    /**
     * Set your bot's user name. Must be used in conjunction with `as_user` set to false, otherwise ignored. See [authorship](#authorship) below.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    public String username;
    public ChatPostMessageApplicationJSON withUsername(String username) {
        this.username = username;
        return this;
    }
    
    public ChatPostMessageApplicationJSON(@JsonProperty("channel") String channel) {
        this.channel = channel;
  }
}
