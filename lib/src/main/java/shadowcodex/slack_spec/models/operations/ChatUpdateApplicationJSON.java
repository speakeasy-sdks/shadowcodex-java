/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package shadowcodex.slack_spec.models.operations;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class ChatUpdateApplicationJSON {
    /**
     * Pass true to update the message as the authed user. [Bot users](/bot-users) in this context are considered authed users.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("as_user")
    public String asUser;
    public ChatUpdateApplicationJSON withAsUser(String asUser) {
        this.asUser = asUser;
        return this;
    }
    
    /**
     * A JSON-based array of structured attachments, presented as a URL-encoded string. This field is required when not presenting `text`. If you don't include this field, the message's previous `attachments` will be retained. To remove previous `attachments`, include an empty array for this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachments")
    public String attachments;
    public ChatUpdateApplicationJSON withAttachments(String attachments) {
        this.attachments = attachments;
        return this;
    }
    
    /**
     * A JSON-based array of [structured blocks](/block-kit/building), presented as a URL-encoded string. If you don't include this field, the message's previous `blocks` will be retained. To remove previous `blocks`, include an empty array for this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocks")
    public String blocks;
    public ChatUpdateApplicationJSON withBlocks(String blocks) {
        this.blocks = blocks;
        return this;
    }
    
    /**
     * Channel containing the message to be updated.
     */
    @JsonProperty("channel")
    public String channel;
    public ChatUpdateApplicationJSON withChannel(String channel) {
        this.channel = channel;
        return this;
    }
    
    /**
     * Find and link channel names and usernames. Defaults to `none`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `none`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("link_names")
    public String linkNames;
    public ChatUpdateApplicationJSON withLinkNames(String linkNames) {
        this.linkNames = linkNames;
        return this;
    }
    
    /**
     * Change how messages are treated. Defaults to `client`, unlike `chat.postMessage`. Accepts either `none` or `full`. If you do not specify a value for this field, the original value set for the message will be overwritten with the default, `client`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parse")
    public String parse;
    public ChatUpdateApplicationJSON withParse(String parse) {
        this.parse = parse;
        return this;
    }
    
    /**
     * New text for the message, using the [default formatting rules](/reference/surfaces/formatting). It's not required when presenting `blocks` or `attachments`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    public String text;
    public ChatUpdateApplicationJSON withText(String text) {
        this.text = text;
        return this;
    }
    
    /**
     * Timestamp of the message to be updated.
     */
    @JsonProperty("ts")
    public String ts;
    public ChatUpdateApplicationJSON withTs(String ts) {
        this.ts = ts;
        return this;
    }
    
    public ChatUpdateApplicationJSON(@JsonProperty("channel") String channel, @JsonProperty("ts") String ts) {
        this.channel = channel;
        this.ts = ts;
  }
}
